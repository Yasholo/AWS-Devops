terraform_project/
│
├── modules/            # Directory for reusable modules
│   ├── networking/
│   │   ├── main.tf
provider "aws" {
  region = var.region_name
}

resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr_block
  tags = {
    Name = var.vpc_name
  }
}

resource "aws_internet_gateway" "main" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = var.igw_name
  }
}

resource "aws_subnet" "public_subnet1" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.public_subnet1_cidr
  availability_zone = var.az_1
  tags = {
    Name = var.public_subnet1_name
  }
}

resource "aws_subnet" "public_subnet2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.public_subnet2_cidr
  availability_zone = var.az_2
  tags = {
    Name = var.public_subnet2_name
  }
}

resource "aws_subnet" "private_subnet1" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet1_cidr
  availability_zone = var.az_1
  tags = {
    Name = var.private_subnet1_name
  }
}

resource "aws_subnet" "private_subnet2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_subnet2_cidr
  availability_zone = var.az_2
  tags = {
    Name = var.private_subnet2_name
  }
}

resource "aws_subnet" "private_db_subnet1" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_db_subnet1_cidr
  availability_zone = var.az_1
  tags = {
    Name = var.private_db_subnet1_name
  }
}

resource "aws_subnet" "private_db_subnet2" {
  vpc_id            = aws_vpc.main.id
  cidr_block        = var.private_db_subnet2_cidr
  availability_zone = var.az_2
  tags = {
    Name = var.private_db_subnet2_name
  }
}


resource "aws_route_table" "public_route_table" {
  vpc_id = aws_vpc.main.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.main.id
  }

  tags = {
    Name = var.public_rt_name
  }
}

resource "aws_route_table_association" "public_subnet1_association" {
  subnet_id      = aws_subnet.public_subnet1.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_route_table_association" "public_subnet2_association" {
  subnet_id      = aws_subnet.public_subnet2.id
  route_table_id = aws_route_table.public_route_table.id
}

resource "aws_route_table" "private_route_table1" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.private_rt_name}-1"
  }
}

resource "aws_route_table" "private_route_table2" {
  vpc_id = aws_vpc.main.id

  tags = {
    Name = "${var.private_rt_name}-2"
  }
}

resource "aws_nat_gateway" "nat_gateway1" {
  allocation_id = aws_eip.nat_eip1.id
  subnet_id     = aws_subnet.public_subnet1.id
}

resource "aws_nat_gateway" "nat_gateway2" {
  allocation_id = aws_eip.nat_eip2.id
  subnet_id     = aws_subnet.public_subnet2.id
}

resource "aws_eip" "nat_eip1" {
  domain = "vpc"
}

resource "aws_eip" "nat_eip2" {
  domain = "vpc"
}


resource "aws_route" "private_route_nat_gateway1" {
  route_table_id         = aws_route_table.private_route_table1.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat_gateway1.id
}

resource "aws_route" "private_route_nat_gateway2" {
  route_table_id         = aws_route_table.private_route_table2.id
  destination_cidr_block = "0.0.0.0/0"
  nat_gateway_id         = aws_nat_gateway.nat_gateway2.id
}

│   │   ├── variables.tf
variable "region_name" {
  description = "The AWS region where resources will be deployed"
  type        = string
  default     = "us-east-1"
}

variable "vpc_cidr_block" {
  description = "The CIDR block for the VPC"
  type        = string
  default     = "10.0.0.0/16"
}

variable "vpc_name" {
  description = "The name tag for the VPC"
  type        = string
  default     = "multi-tier-vpc"
}

variable "igw_name" {
  description = "The name tag for the Internet Gateway"
  type        = string
  default     = "multi-tier-igw"
}

variable "public_subnet1_cidr" {
  description = "The CIDR block for the first public subnet"
  type        = string
  default     = "10.0.1.0/24"
}

variable "public_subnet1_name" {
  description = "The name tag for the first public subnet"
  type        = string
  default     = "multi-tier-web-subnet-1"
}

variable "public_subnet2_cidr" {
  description = "The CIDR block for the second public subnet"
  type        = string
  default     = "10.0.2.0/24"
}

variable "public_subnet2_name" {
  description = "The name tag for the second public subnet"
  type        = string
  default     = "multi-tier-web-subnet-2"
}

variable "private_subnet1_cidr" {
  description = "The CIDR block for the first private subnet"
  type        = string
  default     = "10.0.3.0/24"
}

variable "private_subnet1_name" {
  description = "The name tag for the first private subnet"
  type        = string
  default     = "multi-tier-app-subnet-1"
}

variable "private_subnet2_cidr" {
  description = "The CIDR block for the second private subnet"
  type        = string
  default     = "10.0.4.0/24"
}

variable "private_subnet2_name" {
  description = "The name tag for the second private subnet"
  type        = string
  default     = "multi-tier-app-subnet-2"
}

variable "private_db_subnet1_cidr" {
  description = "The CIDR block for the first private database subnet"
  type        = string
  default     = "10.0.5.0/24"
}

variable "private_db_subnet1_name" {
  description = "The name tag for the first private database subnet"
  type        = string
  default     = "multi-tier-db-subnet-1"
}

variable "private_db_subnet2_cidr" {
  description = "The CIDR block for the second private database subnet"
  type        = string
  default     = "10.0.6.0/24"
}

variable "private_db_subnet2_name" {
  description = "The name tag for the second private database subnet"
  type        = string
  default     = "multi-tier-db-subnet-2"
}

variable "az_1" {
  description = "The availability zone for the first subnet"
  type        = string
  default     = "us-east-1a"
}

variable "az_2" {
  description = "The availability zone for the second subnet"
  type        = string
  default     = "us-east-1b"
}

variable "public_rt_name" {
  description = "The name tag for the public route table"
  type        = string
  default     = "multi-tier-public-route-table"
}

variable "private_rt_name" {
  description = "The name tag for the private route table"
  type        = string
  default     = "multi-tier-private-route-table"
}

│   │   └── outputs.tf
output "vpc_id" {
  value = aws_vpc.main.id
}

output "public_subnet1_id" {
  value = aws_subnet.public_subnet1.id
}

output "public_subnet2_id" {
  value = aws_subnet.public_subnet2.id
}

output "private_subnet1_id" {
  value = aws_subnet.private_subnet1.id
}

output "private_subnet2_id" {
  value = aws_subnet.private_subnet2.id
}

output "private_db_subnet1_id" {
  value = aws_subnet.private_db_subnet1.id 
}

output "private_db_subnet2_id" {
  value = aws_subnet.private_db_subnet2.id 
}

output "public_route_table_id" {
  value = aws_route_table.public_route_table.id
}

output "private_route_table1_id" {
  value = aws_route_table.private_route_table1.id
}

output "private_route_table2_id" {
  value = aws_route_table.private_route_table2.id
}

output "nat_gateway1_id" {
  value = aws_nat_gateway.nat_gateway1.id
}

output "nat_gateway2_id" {
  value = aws_nat_gateway.nat_gateway2.id
}

output "nat_eip1_public_ip" {
  value = aws_eip.nat_eip1.public_ip
}

output "nat_eip2_public_ip" {
  value = aws_eip.nat_eip2.public_ip
}

│   ├── security_group/
│   │   ├── main.tf
# Web Server Security Group

resource "aws_security_group" "alb_web_sg" {
  name        = var.alb_sg_web_name
  description = "ALB Security Group for Web Servers"
  vpc_id      = var.vpc_id

  # Define ingress rules for web servers
  ingress {
    description = "HTTP from Internet"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Define egress rules for web servers
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.alb_sg_web_name
  }
}

# Auto Scaling Group Security Group for Web Servers
resource "aws_security_group" "asg_security_group_web" {
  name        = var.asg_sg_web_name
  description = "ASG Security Group for Web Servers"
  vpc_id      = var.vpc_id

  # Ingress rule allowing HTTP traffic from ALB
  ingress {
    description     = "HTTP from ALB"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_web_sg.id]
  }

  # Ingress rule allowing SSH traffic from anywhere or your IP
  ingress {
    description = "SSH From Anywhere or Your-IP"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Egress rule allowing all traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.asg_sg_web_name
  }
}

# Application Server Security Group
resource "aws_security_group" "alb_app_sg" {
  name        = var.alb_sg_app_name
  description = "ALB Security Group for Application Servers"
  vpc_id      = var.vpc_id

  # Define ingress rules for application servers
  ingress {
    description     = "Allow HTTP traffic from ALB"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_web_sg.id]
  }

  # Define egress rules for application servers
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.alb_sg_app_name
  }
}

# Application Server Auto Scaling Group Security Group
resource "aws_security_group" "asg_app_sg" {
  name        = var.asg_sg_app_name
  description = "ASG Security Group for Application Servers"
  vpc_id      = var.vpc_id

  # Ingress rule allowing HTTP traffic from ALB
  ingress {
    description     = "Allow HTTP traffic from ALB"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_app_sg.id]
  }

  # Ingress rule allowing SSH traffic from anywhere or your IP
  ingress {
    description = "Allow SSH traffic from anywhere or your IP"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  # Egress rule allowing all traffic
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.asg_sg_app_name
  }
}


# Database Security Group

resource "aws_security_group" "db_sg" {
  name        = var.db_sg_name
  description = "Database Security Group"
  vpc_id      = var.vpc_id

  # Define ingress rules for database
  ingress {
    description     = "MySQL from Application Servers"
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_app_sg.id]
  }

  ingress {
    description = "SSH from specific IP"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["10.0.0.0/16"]
  }

  # Define egress rules for database
  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.db_sg_name
  }
}

│   │   ├── variables.tf
variable "vpc_id" {
  description = "The ID of the VPC."
  type        = string
}

variable "alb_sg_web_name" {
  description = "The name of the security group for the web ALB."
  type        = string
}

variable "asg_sg_web_name" {
  description = "The name of the security group for the web auto-scaling group."
  type        = string
}

variable "alb_sg_app_name" {
  description = "The name of the security group for the app ALB."
  type        = string
}

variable "asg_sg_app_name" {
  description = "The name of the security group for the app auto-scaling group."
  type        = string
}

variable "db_sg_name" {
  description = "The name of the security group for the database."
  type        = string
}

│   │   └── outputs.tf
output "web_security_group_id" {
  description = "The ID of the Web Server Security Group"
  value       = aws_security_group.alb_web_sg.id
}

output "asg_web_security_group_id" {
  description = "The ID of the Auto Scaling Group Security Group for Web Servers"
  value       = aws_security_group.asg_security_group_web.id
}

output "app_security_group_id" {
  description = "The ID of the Application Server Security Group"
  value       = aws_security_group.alb_app_sg.id
}

output "asg_app_security_group_id" {
  description = "The ID of the Auto Scaling Group Security Group for Application Servers"
  value       = aws_security_group.asg_app_sg.id
}

output "db_sg_id" {
  description = "The ID of the Database Security Group"
  value       = aws_security_group.db_sg.id
}

│   ├── load_balancer/
│   │   ├── main.tf
# Create Application Load Balancer
resource "aws_lb" "web_lb" {
  name               = var.alb_web_name
  internal           = false
  load_balancer_type = "application"
  subnets            = var.subnets
  security_groups    = [var.security_group_id]
}

# Create target group for web servers
resource "aws_lb_target_group" "web_target_group" {
  name     = var.web_tg_name
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    path     = "/"
    matcher  = 200
  }
}

# Create target group for application servers
resource "aws_lb_target_group" "app_target_group" {
  name     = var.app_tg_name
  port     = 80
  protocol = "HTTP"
  vpc_id   = var.vpc_id

  health_check {
    path     = "/"
    matcher  = 200
  }
}

# Attach web servers to target group
resource "aws_lb_target_group_attachment" "web_servers" {
  for_each         = toset(var.web_instance_ids)
  target_group_arn = aws_lb_target_group.web_target_group.arn
  target_id        = each.value
  port             = 80
}

# Attach application servers to target group
resource "aws_lb_target_group_attachment" "app_servers" {
  for_each         = toset(var.app_instance_ids)
  target_group_arn = aws_lb_target_group.app_target_group.arn
  target_id        = each.value
  port             = 80
}

│   │   ├── variables.tf
variable "alb_web_name" {
  description = "The name tag for the web application load balancer"
  type        = string
  default     = "multi-tier-web-alb"
}

variable "subnets" {
  description = "A list of subnet IDs where the ALB will be placed"
  type        = list(string)
}

variable "security_group_id" {
  description = "The security group ID for the ALB"
  type        = string
}

variable "web_tg_name" {
  description = "The name for the target group associated with the ALB"
  type        = string
}

variable "app_tg_name" {
  description = "The name tag for the application target group"
  type        = string
}

variable "web_instance_ids" {
  description = "List of web instance IDs to attach to the target group"
  type        = list(string)
}

variable "app_instance_ids" {
  description = "List of app instance IDs to attach to the target group"
  type        = list(string)
}

variable "vpc_id" {
  description = "The ID of the VPC"
  type        = string
}

#variable "target_instance_ids" {
#  description = "A list of instance IDs to attach to the target group"
#  type        = list(string)
#}

│   │   └── outputs.tf
output "load_balancer_dns_name" {
  description = "The DNS name of the created Application Load Balancer (ALB)"
  value       = aws_lb.web_lb.dns_name
}


output "web_tg_arn" {
  value = aws_lb_target_group.web_target_group.arn
}

output "app_tg_arn" {
  value = aws_lb_target_group.app_target_group.arn
}

│   ├── auto_scaling_group/
│   │   ├── main.tf
# Launch Configuration for Web Servers
resource "aws_launch_configuration" "web_launch_config" {
  name          = "${var.asg_web_name}-launch-configuration"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name
  security_groups = [var.asg_sg_web_id]

  lifecycle {
    create_before_destroy = true
  }

}

# Auto Scaling Group for Web Servers
resource "aws_autoscaling_group" "web_asg" {
  launch_configuration = aws_launch_configuration.web_launch_config.id
  vpc_zone_identifier  = [var.public_subnet1_id, var.public_subnet2_id]
  min_size             = 1
  max_size             = 3
  desired_capacity     = 2
  target_group_arns    = [var.web_tg_arn]

  tag {
    key                 = "Name"
    value               = var.web_instance_name
    propagate_at_launch = true
  }
}

# Launch Configuration for Application Servers
resource "aws_launch_configuration" "app_launch_config" {
  name          = "${var.asg_app_name}-launch-configuration"
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name
  security_groups = [var.asg_sg_app_id]

  lifecycle {
    create_before_destroy = true
  }

}

# Auto Scaling Group for Application Servers
resource "aws_autoscaling_group" "app_asg" {
  launch_configuration = aws_launch_configuration.app_launch_config.id
  vpc_zone_identifier  = [var.private_subnet1_id, var.private_subnet2_id]
  min_size             = 1
  max_size             = 3
  desired_capacity     = 2
  target_group_arns    = [var.app_tg_arn]

  tag {
    key                 = "Name"
    value               = var.app_instance_name
    propagate_at_launch = true
  }
}

│   │   ├── variables.tf
variable "vpc_id" {
  description = "The ID of the VPC."
  type        = string
}

variable "ami_id" {
  description = "The AMI ID for the instances."
  type        = string
}

variable "instance_type" {
  description = "The type of instance to use."
  type        = string
}

variable "key_name" {
  description = "The key name to use for the instances."
  type        = string
}

variable "asg_app_name" {
  description = "The name of the auto-scaling group for the app."
  type        = string
}

variable "asg_web_name" {
  description = "The name of the auto-scaling group for the web."
  type        = string
}

variable "app_instance_name" {
  description = "The name of the app instances."
  type        = string
}

variable "web_instance_name" {
  description = "The name of the web instances."
  type        = string
}

variable "private_subnet1_id" {
  description = "The ID of the first private subnet."
  type        = string
}

variable "private_subnet2_id" {
  description = "The ID of the second private subnet."
  type        = string
}

variable "public_subnet1_id" {
  description = "The ID of the first public subnet."
  type        = string
}

variable "public_subnet2_id" {
  description = "The ID of the second public subnet."
  type        = string
}

variable "asg_sg_app_id" {
  description = "The ID of the security group for the app auto-scaling group."
  type        = string
}

variable "asg_sg_web_id" {
  description = "The ID of the security group for the web auto-scaling group."
  type        = string
}

variable "app_tg_arn" {
  description = "The ARN of the app target group."
  type        = string
}

variable "web_tg_arn" {
  description = "The ARN of the web target group."
  type        = string
}

│   │   └── outputs.tf
output "web_asg_id" {
  description = "ID of the web Auto Scaling Group"
  value       = aws_autoscaling_group.web_asg.id
}

output "app_asg_id" {
  description = "ID of the application Auto Scaling Group"
  value       = aws_autoscaling_group.app_asg.id
}

│   ├── database/
│   │   ├── main.tf
# RDS Subnet Group
resource "aws_db_subnet_group" "db_subnet_group" {
  name       = var.db_subnet_grp_name
  subnet_ids = [var.private_db_subnet1_id, var.private_db_subnet2_id]
  description = "Subnet group for RDS instances"

  tags = {
    Name = var.db_subnet_grp_name
  }
}

# RDS Instance
resource "aws_db_instance" "db_instance" {
  identifier              = var.db_name
  allocated_storage       = 20
  storage_type            = "gp2"
  engine                  = "mysql"
  engine_version          = "8.0.35"
  instance_class          = var.db_instance_class
  #name                    = var.db_name
  username                = var.db_username
  password                = var.db_password
  db_subnet_group_name    = aws_db_subnet_group.db_subnet_group.name
  vpc_security_group_ids  = [var.db_sg_id]
  skip_final_snapshot     = true
  publicly_accessible     = false

  tags = {
    Name = var.db_name
  }
}

│   │   ├── variables.tf
variable "db_name" {
  description = "Name of the database"
  type        = string
}

variable "db_instance_class" {
  description = "Instance class for the RDS instance"
  type        = string
}

variable "db_username" {
  description = "Username for the database"
  type        = string
}

variable "db_password" {
  description = "Password for the database"
  type        = string
  sensitive   = true
}

variable "db_subnet_grp_name" {
  description = "Name of the DB subnet group"
  type        = string
}

variable "private_db_subnet1_id" {
  description = "ID of the first private DB subnet"
  type        = string
}

variable "private_db_subnet2_id" {
  description = "ID of the second private DB subnet"
  type        = string
}

variable "db_sg_id" {
  description = "ID of the security group for the DB"
  type        = string
}

#variable "db_instance" {
#  description = "Instance type for the DB instance"
#  type        = string
#}

│   │   └── outputs.tf
output "db_instance_endpoint" {
  description = "Endpoint of the RDS instance"
  value       = aws_db_instance.db_instance.endpoint
}

output "db_instance_id" {
  description = "ID of the RDS instance"
  value       = aws_db_instance.db_instance.id
}

│   ├── web/
│   │   ├── main.tf
# Auto Scaling Group for Web Servers
resource "aws_launch_template" "web" {
  name_prefix   = var.web_instance_name
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name

  network_interfaces {
    associate_public_ip_address = true
    security_groups             = [var.asg_sg_web_id]
  }

  lifecycle {
    create_before_destroy = true
  }

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = var.web_instance_name
    }
  }
}

resource "aws_autoscaling_group" "web" {
  desired_capacity     = 2
  max_size             = 5
  min_size             = 1
  launch_template {
    id      = aws_launch_template.web.id
    version = "$Latest"
  }

  vpc_zone_identifier = [var.public_subnet1_id, var.public_subnet2_id]
  target_group_arns   = [var.web_tg_arn]
  health_check_type   = "ELB"
  health_check_grace_period = 300

  tag {
    key                 = "Name"
    value               = var.web_instance_name
    propagate_at_launch = true
  }

  lifecycle {
    create_before_destroy = true
  }
}

│   │   ├── variables.tf
variable "web_instance_name" {
  description = "Name of the web instance"
  type        = string
}

variable "ami_id" {
  description = "AMI ID for the web instance"
  type        = string
}

variable "instance_type" {
  description = "Instance type for the web instance"
  type        = string
}

variable "key_name" {
  description = "Key pair name for the web instance"
  type        = string
}

variable "asg_sg_web_id" {
  description = "Security group ID for the web ASG"
  type        = string
}

variable "public_subnet1_id" {
  description = "ID of the first public subnet"
  type        = string
}

variable "public_subnet2_id" {
  description = "ID of the second public subnet"
  type        = string
}

variable "web_tg_arn" {
  description = "ARN of the web target group"
  type        = string
}

│   │   └── outputs.tf
output "web_asg_name" {
  description = "Name of the web Auto Scaling Group"
  value       = aws_autoscaling_group.web.name
}

output "web_launch_template_id" {
  description = "ID of the web launch template"
  value       = aws_launch_template.web.id
}

│   ├── application/
│   │   ├── main.tf
# Auto Scaling Group for Application Servers
resource "aws_launch_template" "application" {
  name_prefix   = var.app_instance_name
  image_id      = var.ami_id
  instance_type = var.instance_type
  key_name      = var.key_name

  network_interfaces {
    associate_public_ip_address = false
    security_groups             = [var.asg_sg_app_id]
  }

  lifecycle {
    create_before_destroy = true
  }

  tag_specifications {
    resource_type = "instance"
    tags = {
      Name = var.app_instance_name
    }
  }
}

resource "aws_autoscaling_group" "application" {
  desired_capacity     = 2
  max_size             = 5
  min_size             = 1
  launch_template {
    id      = aws_launch_template.application.id
    version = "$Latest"
  }

  vpc_zone_identifier = [var.private_subnet1_id, var.private_subnet2_id]
  target_group_arns   = [var.app_tg_arn]
  health_check_type   = "ELB"
  health_check_grace_period = 300

  tag {
    key                 = "Name"
    value               = var.app_instance_name
    propagate_at_launch = true
  }

  lifecycle {
    create_before_destroy = true
  }
}

│   │   ├── variables.tf
variable "app_instance_name" {
  description = "Name of the application instance"
  type        = string
}

variable "ami_id" {
  description = "AMI ID for the application instance"
  type        = string
}

variable "instance_type" {
  description = "Instance type for the application instance"
  type        = string
}

variable "key_name" {
  description = "Key pair name for the application instance"
  type        = string
}

variable "asg_sg_app_id" {
  description = "Security group ID for the application ASG"
  type        = string
}

variable "private_subnet1_id" {
  description = "ID of the first private subnet"
  type        = string
}

variable "private_subnet2_id" {
  description = "ID of the second private subnet"
  type        = string
}

variable "app_tg_arn" {
  description = "ARN of the application target group"
  type        = string
}

│   │   └── outputs.tf
output "app_asg_name" {
  description = "Name of the application Auto Scaling Group"
  value       = aws_autoscaling_group.application.name
}

output "app_launch_template_id" {
  description = "ID of the application launch template"
  value       = aws_launch_template.application.id
}

│   └── monitoring/
│       ├── main.tf
resource "aws_cloudwatch_dashboard" "monitoring_dashboard" {
  name = "multi-tier-monitoring-dashboard"
  dashboard_body = <<EOF
{
  "widgets": [
    {
      "type": "metric",
      "x": 0,
      "y": 0,
      "width": 24,
      "height": 6,
      "properties": {
        "metrics": [
          ["AWS/EC2", "CPUUtilization", "InstanceId", "REPLACE_WITH_INSTANCE_ID", {"period": 300, "stat": "Average"}]
        ],
        "period": 300,
        "title": "EC2 CPU Utilization",
        "view": "timeSeries"
      }
    }
  ]
}
EOF
}

│       ├── variables.tf
variable "app_instance_id" {
  description = "ID of the application instance for monitoring"
  type        = string
}

variable "web_instance_id" {
  description = "ID of the web instance for monitoring"
  type        = string
}

variable "db_instance_id" {
  description = "ID of the database instance for monitoring"
  type        = string
}

│       └── outputs.tf
output "monitoring_dashboard_name" {
  description = "Name of the CloudWatch dashboard for monitoring"
  value       = aws_cloudwatch_dashboard.monitoring_dashboard.name
}

│
├── main.tf             # Main Terraform configuration file
provider "aws" {
  region = var.region_name
}

module "network" {
  source = "./modules/network"
  vpc_cidr_block          = var.vpc_cidr_block
  public_subnet1_cidr     = var.public_subnet1_cidr
  public_subnet2_cidr     = var.public_subnet2_cidr
  private_subnet1_cidr    = var.private_subnet1_cidr
  private_subnet2_cidr    = var.private_subnet2_cidr
  private_db_subnet1_cidr = var.private_db_subnet1_cidr
  private_db_subnet2_cidr = var.private_db_subnet2_cidr
  az_1                    = var.az_1
  az_2                    = var.az_2
  vpc_name                = var.vpc_name
  igw_name                = var.igw_name
  #nat_gw_name             = var.nat_gw_name
  public_rt_name          = var.public_rt_name
  private_rt_name         = var.private_rt_name
}

module "security_group" {
  source             = "./modules/security_group"
  vpc_id             = module.network.vpc_id
  alb_sg_web_name    = var.alb_sg_web_name
  asg_sg_web_name    = var.asg_sg_web_name
  alb_sg_app_name    = var.alb_sg_app_name
  asg_sg_app_name    = var.asg_sg_app_name
  db_sg_name         = var.db_sg_name
  #web_sg_cidr_blocks = var.web_sg_cidr_blocks
  #app_sg_cidr_blocks = var.app_sg_cidr_blocks
  #db_sg_cidr_blocks  = var.db_sg_cidr_blocks
}

data "aws_instances" "web_instances" {
  filter {
    name   = "tag:Name"
    values = [var.web_instance_name]
  }
}

data "aws_instances" "app_instances" {
  filter {
    name   = "tag:Name"
    values = [var.app_instance_name]
  }
}

module "load_balancer" {
  source                = "./modules/load_balancer"
  security_group_id     = module.security_group.web_security_group_id
  vpc_id                = module.network.vpc_id
  #web_instance_name    = var.web_instance_name
  web_tg_name           = var.web_tg_name
  app_tg_name           = var.app_tg_name
  web_instance_ids      = data.aws_instances.web_instances.ids
  app_instance_ids      = data.aws_instances.app_instances.ids
  subnets               = [module.network.public_subnet1_id, module.network.public_subnet2_id]
}


module "auto_scaling_group" {
  source              = "./modules/auto_scaling_group"
  vpc_id              = module.network.vpc_id
  ami_id              = var.ami_id
  instance_type       = var.instance_type
  key_name            = var.key_name
  asg_app_name        = var.asg_app_name
  asg_web_name        = var.asg_web_name
  app_instance_name   = var.app_instance_name
  web_instance_name   = var.web_instance_name
  private_subnet1_id  = module.network.private_subnet1_id
  private_subnet2_id  = module.network.private_subnet2_id
  public_subnet1_id   = module.network.public_subnet1_id
  public_subnet2_id   = module.network.public_subnet2_id
  app_tg_arn          = module.load_balancer.app_tg_arn
  web_tg_arn          = module.load_balancer.web_tg_arn
  asg_sg_web_id      = module.security_group.asg_web_security_group_id
  asg_sg_app_id      = module.security_group.asg_app_security_group_id
}

# Define target group attachments separately
#resource "aws_lb_target_group_attachment" "web" {
#  count            = length(module.auto_scaling_group.web_instance_ids)
#  target_group_arn = module.load_balancer.web_tg_arn
#  target_id        = module.auto_scaling_group.web_instance_ids[count.index]
#  port             = 80
#}

#resource "aws_lb_target_group_attachment" "app" {
#  count            = length(module.auto_scaling_group.app_instance_ids)
#  target_group_arn = module.load_balancer.app_tg_arn
#  target_id        = module.auto_scaling_group.app_instance_ids[count.index]
#  port             = 80
#}

module "database" {
  source = "./modules/database"
  db_name               = var.db_name
  db_instance_class     = var.db_instance_class
  db_username           = var.db_username
  db_password           = var.db_password
  db_subnet_grp_name    = var.db_subnet_grp_name
  private_db_subnet1_id = module.network.private_db_subnet1_id
  private_db_subnet2_id = module.network.private_db_subnet2_id
  db_sg_id              = module.security_group.db_sg_id
}

├── variables.tf        # Input variables
variable "region_name" {
  description = "The region where AWS resources will be created."
  type        = string
}

variable "instance_type" {
  description = "The type of instance to be created."
  type        = string
}

variable "ami_id" {
  description = "The AMI ID for the instances."
  type        = string
}

variable "key_name" {
  description = "The key name to access the instances."
  type        = string
}

variable "app_instance_name" {
  description = "The name of the application instances."
  type        = string
}

variable "web_instance_name" {
  description = "The name of the web instances."
  type        = string
}

variable "vpc_cidr_block" {
  description = "The CIDR block for the VPC."
  type        = string
}

variable "vpc_name" {
  description = "The name of the VPC."
  type        = string
}

variable "igw_name" {
  description = "The name of the Internet Gateway."
  type        = string
}

variable "nat_gw_name" {
  description = "The name of the NAT Gateway."
  type        = string
}

variable "public_subnet1_cidr" {
  description = "The CIDR block for the first public subnet."
  type        = string
}

variable "public_subnet1_name" {
  description = "The name of the first public subnet."
  type        = string
}

variable "public_subnet2_cidr" {
  description = "The CIDR block for the second public subnet."
  type        = string
}

variable "public_subnet2_name" {
  description = "The name of the second public subnet."
  type        = string
}

variable "private_subnet1_cidr" {
  description = "The CIDR block for the first private subnet."
  type        = string
}

variable "private_subnet1_name" {
  description = "The name of the first private subnet."
  type        = string
}

variable "private_subnet2_cidr" {
  description = "The CIDR block for the second private subnet."
  type        = string
}

variable "private_subnet2_name" {
  description = "The name of the second private subnet."
  type        = string
}

variable "private_db_subnet1_cidr" {
  description = "The CIDR block for the first private DB subnet."
  type        = string
}

variable "private_db_subnet1_name" {
  description = "The name of the first private DB subnet."
  type        = string
}

variable "private_db_subnet2_cidr" {
  description = "The CIDR block for the second private DB subnet."
  type        = string
}

variable "private_db_subnet2_name" {
  description = "The name of the second private DB subnet."
  type        = string
}

variable "az_1" {
  description = "The first availability zone."
  type        = string
}

variable "az_2" {
  description = "The second availability zone."
  type        = string
}

variable "public_rt_name" {
  description = "The name of the public route table."
  type        = string
}

variable "private_rt_name" {
  description = "The name of the private route table."
  type        = string
}

variable "alb_web_name" {
  description = "The name of the web application load balancer."
  type        = string
}

variable "alb_sg_web_name" {
  description = "The name of the security group for the web ALB."
  type        = string
}

variable "asg_sg_web_name" {
  description = "The name of the security group for the web auto-scaling group."
  type        = string
}

variable "alb_app" {
  description = "The name of the application load balancer."
  type        = string
}

variable "alb_sg_app_name" {
  description = "The name of the security group for the app ALB."
  type        = string
}

variable "asg_sg_app_name" {
  description = "The name of the security group for the app auto-scaling group."
  type        = string
}

variable "web_tg_name" {
  description = "The name of the target group for the web instances."
  type        = string
}

variable "app_tg_name" {
  description = "The name of the target group for the app instances."
  type        = string
}

variable "asg_app_name" {
  description = "The name of the auto-scaling group for the app instances."
  type        = string
}

variable "asg_web_name" {
  description = "The name of the auto-scaling group for the web instances."
  type        = string
}

variable "db_name" {
  description = "The name of the database instance."
  type        = string
}

variable "db_instance_class" {
  description = "The class of the database instance."
  type        = string
}

variable "db_sg_name" {
  description = "The name of the security group for the database."
  type        = string
}

variable "db_subnet_grp_name" {
  description = "The name of the DB subnet group."
  type        = string
}

variable "db_username" {
  description = "The username for the database."
  type        = string
}

variable "db_password" {
  description = "The password for the database."
  type        = string
}

├── outputs.tf          # Output variables
output "vpc_id" {
  value = module.network.vpc_id
}

output "web_security_group_id" {
  value = module.security_group.web_security_group_id
}

output "app_security_group_id" {
  value = module.security_group.app_security_group_id
}

output "db_security_group_id" {
  value = module.security_group.db_sg_id
}

└── terraform.tfvars    # Terraform variable values
region_name                    = "us-east-1"
instance_type                  = "t2.micro"
ami_id                         = "ami-04b70fa74e45c3917" # Specify your AMI ID here
key_name                       = "Jobs"
app_instance_name              = "multi-tier-app-instances"
web_instance_name              = "multi-tier-web-instances"
vpc_cidr_block                 = "10.0.0.0/16"
vpc_name                       = "multi-tier-vpc"
igw_name                       = "multi-tier-igw"
nat_gw_name                    = "multi-tier-nat-gw"
public_subnet1_cidr            = "10.0.1.0/24"
public_subnet1_name            = "multi-tier-web-subnet-1"
public_subnet2_cidr            = "10.0.2.0/24"
public_subnet2_name            = "multi-tier-web-subnet-2"
private_subnet1_cidr           = "10.0.3.0/24"
private_subnet1_name           = "multi-tier-app-subnet-1"
private_subnet2_cidr           = "10.0.4.0/24"
private_subnet2_name           = "multi-tier-app-subnet-2"
private_db_subnet1_cidr        = "10.0.5.0/24"
private_db_subnet1_name        = "multi-tier-db-subnet-1"
private_db_subnet2_cidr        = "10.0.6.0/24"
private_db_subnet2_name        = "multi-tier-db-subnet-2"
az_1                           = "us-east-1a"
az_2                           = "us-east-1b"
public_rt_name                 = "multi-tier-public-route-table"
private_rt_name                = "multi-tier-private-route-table"
alb_web_name                   = "multi-tier-web-alb"
alb_sg_web_name                = "multi-tier-alg-sg-web"
asg_sg_web_name                = "multi-tier-asg-sg-web"
alb_app                        = "multi-tier-app-lb"
alb_sg_app_name                = "multi-tier-alg-sg-app"
asg_sg_app_name                = "multi-tier-asg-sg-app"
web_tg_name                    = "multi-tier-web-target-group"
app_tg_name                    = "multi-tier-app-target-group"
asg_app_name                   = "multi-tier-auto-scaling-grp-app"
asg_web_name                   = "multi-tier-auto-scaling-grp-web"
db_name                        = "mydatabase"
db_sg_name                     = "multi-tier-db-sg"
db_subnet_grp_name             = "multi-tier-db-subnet-grp"
db_instance_class              = "db.t3.micro"
db_username                    = "db_admin"
db_password                    = "010password69-="