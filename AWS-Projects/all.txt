main.tf 

# Configure AWS provider
provider "aws" {
  region = "us-east-1"  # Change to your desired region
}

# Create VPC, subnets, internet gateway, route tables, etc.
module "network" {
  source = "./modules/network"
}

# Presentation Layer: Launch web servers and load balancer
module "presentation" {
  source      = "./modules/web"
  subnet_ids = module.network.public_subnet_ids
}

# Application Layer: Launch application servers
module "application" {
  source      = "./modules/application"
  subnet_ids = module.network.private_subnet_ids
}

# Data Layer: Launch RDS MySQL database
module "database" {
  source = "./modules/database"
}

# Monitoring and Logging
module "monitoring" {
  source = "./modules/monitoring"
}


terraform.tfvars

region_name                    = "us-east-1"
instance_type                  = "t2.micro"
ami_id                         = ""
key_name                       = "terra"
app_instance_name              = "multi-tier-app-instances"
web_instance_name              = "multi-tier-web-instances"
vpc_cidr_block                 = "10.0.0.0/16"
vpc_name                       = "multi-tier-vpc"
igw_name                       = "multi-tier-igw"
nat_gw_name                    = "multi-tier-nat-gw"
public_subnet1_cidr            = "10.0.1.0/24"
public_subnet1_name            = "multi-tier-web-subnet-1"
public_subnet2_cidr            = "10.0.2.0/24"
public_subnet2_name            = "multi-tier-web-subnet-2"
private_subnet1_cidr           = "10.0.3.0/24"
private_subnet1_name           = "mutli-tier-app-subnet-1"
private_subnet2_cidr           = "10.0.4.0/24"
private_subnet2_name           = "multi-tier-app-subnet-2"
private_db_subnet1_cidr        = "10.0.5.0/24"
private_db_subnet1_name        = "mutli-tier-db-subnet-1"
private_db_subnet2_cidr        = "10.0.6.0/24"
private_db_subnet2_name        = "mutli-tier-db-subnet-2"
az_1                           = "us-east-1a"
az_2                           = "us-east-1b"
public_rt_name                 = "multi-tier-public-route-table"
private_rt_name                = "multi-tier-private-rote-table"
alb_web                        = "mutli-tier-web-alb"
alb_sg_web_name                = "mutli-tier-alg-sg-web"
asg_sg_web_name                = "multi-tier-asg-sg-web"
alb_app                        = "mutli-tier-app-lb"
alb_sg_app_name                = "multi-tier-alg-sg-app"
asg_sg_app_name                = "multi-tier-asg-sg-app"
web_tg_name                    = "multi-tier-web-target-group"
app_tg_name                    = "multi-tier-app-target-group"
asg_app_name                   = "mutli-tier-auto-scaling-grp-app"
asg_web_name                   = "multi-tier-auto-scaling-grp-web"
db_name                        = "mydatabase"
db_sg_name                     = "multi-tier-db-sg"
db_subnet_grp_name             = "multi-tier-db-subnet-grp"
db_instance-class              = "db.t2.micro"


###

launch-template-web-name = "three-tier-launch-template-web"
launch-template-app-name = "three-tier-launch-template-app"
app-db-sg-name           = "three-tier-app-db"



output.tf 

output "web_server_ips" {
  value = module.presentation.web_server_ips
}

output "database_endpoint" {
  value = module.database.endpoint
}

./modules/application/main.tf
 
# Create ALB  security group for application servers

resource "aws_security_group" "alb_app_sg" {
  name = var.alb_sg_app_name
  description = "ALB Security Group"
  vpc_id = aws_vpc.main.id

  # Define ingress and egress rules...
  ingress {
    description = "HTTP from Internet"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    security_groups = [aws_security_group.web_sg.id]
  }


  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.alb_sg_app_name
  }
}

# Create ASG security group for application servers

resource "aws_security_group" "asg_app_sg" {
  name        = var.asg_sg_app_name
  description = "ASG Security Group"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description     = "HTTP from ALB"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.alb_app_sg.id]
  }

  ingress {
    description     = "SSH From Anywhere or Your-IP"
    from_port       = 22
    to_port         = 22
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.asg_sg_app_name
  }
}

# Launch EC2 instances for application servers
resource "aws_instance" "app_servers" {
  count                = 2
  ami                  = var.ami_id  # Specify your AMI
  instance_type        = var.instance_type
  subnet_id            = [aws_subnet.private-subnet-1.id, aws_subnet.private-subnet-2.id]
  security_group_ids   = [aws_security_group.alb_app_sg.id]
  key_name             = var.key_name
  
  tag_specifications {

    resource_type = "instance"
    tags = {
      Name = var.app_instance_name
    }
  }

  # Specify user data to configure application servers...
}

# Create Application Load Balancer
resource "aws_lb" "app_lb" {
  name               = var.alb_app 
  internal           = false
  load_balancer_type = "application"
  subnets            =  [aws_subnet.private-subnet-1.id, aws_subnet.private-subnet-2.id]
  security_groups    = [aws_security_group.alb_app_sg.id]
  load_balancer_arn  = aws_lb.app_lb.arn
}

# Create Auto Scaling Group 

resource "aws_autoscaling_group" "asg_app" {
  name                = var.asg_sg_app_name 
  desired_capacity    = 2
  max_size            = 4
  min_size            = 1
  target_group_arns   = [aws_lb_target_group.target-group-app.arn]
  health_check_type   = "EC2"
  vpc_zone_identifier = [aws_subnet.app-subnet1.id, aws_subnet.app-subnet2.id]


  launch_template {
    id      = aws_launch_template.template-app.id
    version = aws_launch_template.template-app.latest_version
  }
}

# Create target group for web servers
resource "aws_lb_target_group" "app_target_group" {
  name     = var.app_target_group
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    path = "/"
    matcher = 200
  }
}

# Attach web servers to target group
resource "aws_lb_target_group_attachment" "app_servers" {
  type = "forward"
  target_group_arn = aws_lb_target_group.app_target_group.arn
  target_id        = aws_instance.app_servers.*.id
  port             = 80
}


./modules/web/main.tf

# Create security group for web servers

resource "aws_security_group" "web_sg" {
  name = var.alb_sg_web_name
  description = "ALB Security Group"
  vpc_id = aws_vpc.main.id

  # Define ingress and egress rules...
  ingress {
    description = "HTTP from Internet"
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }


  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.alb_sg_web_name
  }
}

# Launch EC2 instances for web servers

resource "aws_instance" "web_servers" {
  count                = 2
  ami                  = var.ami_id  # Specify your AMI
  instance_type        = var.instance_type
  key_name             = var.key_name
  subnet_id            = [aws_subnet.public-subnet-1.id, aws_subnet.public-subnet-2.id]
  security_group_ids   = [aws_security_group.web_sg.id]

  user_data = filebase64("user_data.sh")
  tag_specifications {

    resource_type = "instance"
    tags = {
      Name = var.web_instance_name
    }
  }

  # Specify user data to configure web servers...
}


# Create Auto Scaling Security Group 

resource "aws_security_group" "asg-security-group-web" {
  name        = var.asg_sg_web_name 
  description = "ASG Security Group"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    description     = "HTTP from ALB"
    from_port       = 80
    to_port         = 80
    protocol        = "tcp"
    security_groups = [aws_security_group.web_sg.id]
  }

  ingress {
    description = "SSH From Anywhere or Your-IP"
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.asg_sg_web_name 
  }
}

# Create Application Load Balancer

resource "aws_lb" "web_lb" {
  name               = var.alb_web
  internal           = false
  load_balancer_type = "application"
  subnets            = [aws_subnet.public-subnet-1.id, aws_subnet.public-subnet-2.id]
  security_groups    = [aws_security_group.web_sg.id]
  load_balancer_arn  = aws_lb.web_lb.arn
}

# Create Auto Scaling Group
resource "aws_autoscaling_group" "asg_web" {
  name                = var.asg_web_name
  desired_capacity    = 2
  max_size            = 4
  min_size            = 1
  target_group_arns   = [aws_lb_target_group.target-group-web.arn]
  health_check_type   = "EC2"
  vpc_zone_identifier = [aws_subnet.web-subnet1.id, aws_subnet.web-subnet2.id]


  launch_template {
    id      = aws_launch_template.template-web.id
    version = aws_launch_template.template-web.latest_version
  }
}

# Create target group for web servers

resource "aws_lb_target_group" "web_target_group" {
  name     = var.web_target_group
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.main.id

  health_check {
    path = "/"
    matcher = 200
  }
}

# Attach web servers to target group
resource "aws_lb_target_group_attachment" "web_servers" {
  type = "forward"
  target_group_arn = aws_lb_target_group.web_target_group.arn
  target_id        = aws_instance.web_servers.*.id
  port             = 80
}


./modules/network/main.tf

# Create VPC

resource "aws_vpc" "main" {
  cidr_block = var.vpc_cidr_block
  enable_dns_support = true
  enable_dns_hostnames = true
  tags = {
    Name = var.vpc_name
  }
}

# Create public subnet for Web Tier

resource "aws_subnet" "public-subnet-1" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet1_cidr
  availability_zone       = var.az_1
  map_public_ip_on_launch = true
  tags = {
    Name = var.public_subnet1_name
  }
}

resource "aws_subnet" "public-subnet-2" {
  vpc_id                  = aws_vpc.main.id
  cidr_block              = var.public_subnet2_cidr
  availability_zone       = var.az_2
  map_public_ip_on_launch = true
  tags = {
    Name = var.public_subnet2_name
  }
}


# Create private subnet for Application Tier

resource "aws_subnet" "private-subnet-1" {
  vpc_id      = aws_vpc.main.id
  cidr_block  = var.private_subnet1_cidr
  availability_zone = var.az_1
  map_public_ip_on_launch = false
  
  tags = {
    Name = var.private_subnet1_name
  }
}

resource "aws_subnet" "private-subnet-2" {
  vpc_id      = aws_vpc.main.id
  cidr_block  = var.private_subnet2_cidr
  availability_zone = var.az_2
  map_public_ip_on_launch = false

  tags = {
    Name = var.private_subnet2_name
  }
}

# Create private subnet for Database Tier

resource "aws_subnet" "private-db-subnet-1" {
  vpc_id      = aws_vpc.main.id
  cidr_block  = var.private_db_subnet1_cidr
  availability_zone = var.az_1
  tags = {
    Name = var.private_db_subnet1_name
  }
}

resource "aws_subnet" "private-db-subnet-2" {
  vpc_id      = aws_vpc.main.id
  cidr_block  = var.private_db_subnet2_cidr
  availability_zone = var.az_2
  tags = {
    Name = var.private_db_subnet2_name
  }
}


# Create internet gateway

resource "aws_internet_gateway" "gw" {
  vpc_id = aws_vpc.main.id
  tags = {
    Name = var.igw_name
  }
}

# eip

resource "aws_eip" "myeip" {
  domain = "vpc"
}

# Create nat gateway

resource "aws_nat_gateway" "nat_gw" {
  allocation_id     = aws_eip.myeip.id
  connectivity_type = "public"
  subnet_id         = aws_subnet.public-subnet-1.id

  tags = {
    Name = var.nat_gw_name
  }

  depends_on = [aws_internet_gateway.gw]
}

# Attach internet gateway to VPC

resource "aws_vpc_attachment" "gw_attachment" {
  vpc_id       = aws_vpc.main.id
  internet_gateway_id = aws_internet_gateway.gw.id
}

# Create route table for public subnet

resource "aws_route_table" "public-route" {
  vpc_id = aws_vpc.main.id
}

# Associate public subnet with public route table

resource "aws_route_table_association" "public-rt-association-1" {
  subnet_id      = aws_subnet.public-subnet-1.id
  route_table_id = aws_route_table.public-route.id
  depends_on = [aws_subnet.public-subnet-1]
}

resource "aws_route_table_association" "public-rt-association-2" {
  subnet_id      = aws_subnet.public-subnet-2.id
  route_table_id = aws_route_table.public-route.id
  depends_on = [aws_subnet.public-subnet-2]
}

# Create route for internet gateway in public route table

resource "aws_route" "public_internet_gateway" {
  route_table_id         = aws_route_table.public-route.id
  destination_cidr_block = "0.0.0.0/0"
  gateway_id             = aws_internet_gateway.gw.id
}


# Create route table for private subnet

resource "aws_route_table" "private-route" {
  vpc_id = aws_vpc.vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.gw.id
  }

  tags = {
    Name = var.private_rt_name
  }
}

# Associate private subnet with private route table

resource "aws_route_table_association" "private-rt-association-1" {
  subnet_id      = aws_subnet.private-subnet-1.id
  route_table_id = aws_route_table.private-route.id
  depends_on = [aws_subnet.private-subnet-1]
}

resource "aws_route_table_association" "private-rt-association-2" {
  subnet_id      = aws_subnet.private-subnet-2.id
  route_table_id = aws_route_table.private-route.id
  depends_on = [aws_subnet.private-subnet-2]
}


provider "aws" {
  region = var.region_name
}

output "web-server-dns" {
  value = aws_lb.web_lb.dns_name
}


./modules/database/main.tf

# Create RDS MySQL instance

resource "aws_db_instance" "database" {
  allocated_storage    = 10
  storage_type         = "gp2"
  engine               = "mysql"
  engine_version       = "5.7"
  multi_az             = true
  instance_class       = var.db_instance
  name                 = var.db_name
  username             = var.db_username
  password             = var.db_password
  db_subnet_group_name = aws_db_subnet_group.subnet_grp.name
  vpc_security_group_ids = [aws_security_group.db_sg.id]
  parameter_group_name = "default.mysql5.7"

}

# Create Database Security Group

resource "aws_security_group" "db_sg" {
  name        = var.db_sg_name
  description = "DB SEcurity Group"
  vpc_id      = aws_vpc.vpc.id

  ingress {
    from_port       = 3306
    to_port         = 3306
    protocol        = "tcp"
    security_groups = [aws_security_group.asg_app_sg.id]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = var.db_sg_name
  }
}

# Create Database Subnet Group

resource "aws_db_subnet_group" "subnet_grp" {
  name       = var.db_subnet_grp_name
  subnet_ids = [aws_subnet.private-db-subnet-1.id,aws_subnet.private-db-subnet-2.id]

  tags = {
    Name = var.db_subnet_grp_name
  }
}

./modules/monitoring/cloudwatch.tf

# Define AWS provider
provider "aws" {
  region = "us-east-1"
}

# CloudWatch Log Group for application logs
resource "aws_cloudwatch_log_group" "app_logs" {
  name              = "/app_logs"
  retention_in_days = 30
}

# CloudWatch Log Group for system logs
resource "aws_cloudwatch_log_group" "system_logs" {
  name              = "/system_logs"
  retention_in_days = 30
}

# CloudWatch Log Group for security logs
resource "aws_cloudwatch_log_group" "security



